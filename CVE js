  const cveRecords = [
  {
      id: 'CVE-2021-32628',
      severity: 'HIGH',
      cvss: '7.5',
      affectedPackages: 'redis-server, redis-tools',
      cweId: 'CWE-190'
  },
  {
      id: 'CVE-2016-1585',
      severity: 'CRITICAL',
      cvss: '9.8',
      affectedPackages: 'apparmor, libapparmor1',
      cweId: 'CWE-254'
  },
  {
      id: 'CVE-2021-20308',
      severity: 'CRITICAL',
      cvss: '9.8',
      affectedPackages: 'htmldoc, htmldoc-common',
      cweId: 'CWE-190'
  },
  {
      id: 'CVE-2021-4048',
      severity: 'CRITICAL',
      cvss: '9.1',
      affectedPackages: 'libblas3',
      cweId: 'CWE-125'
  },
  {
      id: 'CVE-2022-36227',
      severity: 'CRITICAL',
      cvss: '9.8',
      affectedPackages: 'libarchive13',
      cweId: 'CWE-476'
  }
];

function renderCveRecords() {
  const tbody = document.querySelector('#cve-table tbody');
  tbody.innerHTML = '';
  cveRecords.forEach(cveRecord => {
      const row = tbody.insertRow();
      row.insertCell().textContent = cveRecord.id;
      row.insertCell().textContent = cveRecord.severity;
      row.insertCell().textContent = cveRecord.cvss;
      row.insertCell().textContent = cveRecord.affectedPackages;
      row.insertCell().textContent = cveRecord.cweId;
      const actionsCell = row.insertCell();

      const editButton = document.createElement('button');
      editButton.textContent = 'Edit';
      editButton.addEventListener('click', () => {
          handleEditClick(cveRecord);
      });
      actionsCell.appendChild(editButton);

      const deleteButton = document.createElement('button');
      deleteButton.textContent = 'Delete';
      deleteButton.addEventListener('click', () => {
          const confirmDelete = confirm('Are you sure you want to delete this CVE record?');
          if (confirmDelete) {
              const index = cveRecords.findIndex(record => record.id === cveRecord.id);
              if (index !== -1) {
                  cveRecords.splice(index, 1);
                  renderCveRecords();
              }
          }
      });
      actionsCell.appendChild(deleteButton);
  });
}

renderCveRecords();

document.getElementById('add-cve-button').addEventListener('click', () => {
    document.getElementById('modal').style.display = 'block';
});

document.querySelector('.close').addEventListener('click', () => {
    document.getElementById('modal').style.display = 'none';
});

document.getElementById('cancel-cve').addEventListener('click', () => {
    document.getElementById('modal').style.display = 'none';
});

document.getElementById('new-cve-form').addEventListener('submit', (event) => {
    event.preventDefault();
    const newCveId = document.getElementById('new-cve-id').value;
    const newSeverity = document.getElementById('new-severity').value;
    const newCvss = document.getElementById('new-cvss').value;
    const newAffectedPackages = document.getElementById('new-affected-packages').value;
    const newCweId = document.getElementById('new-cwe-id').value;

    if (newCveId && newSeverity && newCvss && newAffectedPackages && newCweId) {
        cveRecords.push({
            id: newCveId,
            severity: newSeverity,
            cvss: newCvss,
            affectedPackages: newAffectedPackages,
            cweId: newCweId
        });
        renderCveRecords();
        document.getElementById('modal').style.display = 'none';
    } else {
        alert('Please fill in all required fields');
    }
});
function handleEditClick(cveRecord) {
    document.getElementById('modal').style.display = 'block';

    document.getElementById('edit-cve-id').value = cveRecord.id;
    document.getElementById('edit-severity').value = cveRecord.severity;
    document.getElementById('edit-cvss').value = cveRecord.cvss;
    document.getElementById('edit-affected-packages').value = cveRecord.affectedPackages;
    document.getElementById('edit-cwe-id').value = cveRecord.cweId;
}

document.getElementById('new-cve-form').addEventListener('submit', (event) => {
    event.preventDefault();

    const newCveId = document.getElementById('new-cve-id').value;
    const newSeverity = document.getElementById('new-severity').value;
    const newCvss = document.getElementById('new-cvss').value;
    const newAffectedPackages = document.getElementById('new-affected-packages').value;
    const newCweId = document.getElementById('new-cwe-id').value;

    if (newCveId && newSeverity && newCvss && newAffectedPackages && newCweId) {
        cveRecords.push({
            id: newCveId,
            severity: newSeverity,
            cvss: newCvss,
            affectedPackages: newAffectedPackages,
            cweId: newCweId
        });
        renderCveRecords();
        document.getElementById('modal').style.display = 'none';
    } else {
        alert('Please fill in all required fields');
    }
});

function handleSaveEditClick() {
    const editCveId = document.getElementById('edit-cve-id').value;
    const editSeverity = document.getElementById('edit-severity').value;
    const editCvss = document.getElementById('edit-cvss').value;
    const editAffectedPackages = document.getElementById('edit-affected-packages').value;
    const editCweId = document.getElementById('edit-cwe-id').value;

    if (editCveId && editSeverity && editCvss && editAffectedPackages && editCweId) {
        const index = cveRecords.findIndex(record => record.id === editCveId);
        if (index !== -1) {
            cveRecords[index] = {
                id: editCveId,
                severity: editSeverity,
                cvss: editCvss,
                affectedPackages: editAffectedPackages,
                cweId: editCweId
            };

            renderCveRecords();
            document.getElementById('modal').style.display = 'none';
        } else {
            alert('CVE record not found');
        }
    } else {
        alert('Please fill in all required fields');
    }
}

document.getElementById('save-cve').addEventListener('click', handleSaveEditClick);

document.getElementById('cancel-edit-cve').addEventListener('click', () => {
    document.getElementById('modal').style.display = 'none';
});
  
